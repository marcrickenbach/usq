/** ****************************************************************************
 * @brief Internal state machine events generated by Sequencer.
 */

#ifndef FKMG_SEQUENCER_SM_EVT_H
#define FKMG_SEQUENCER_SM_EVT_H

#ifdef __cplusplus
extern "C" {
#endif

/* *****************************************************************************
 * Includes
 */

#include <zephyr/kernel.h>

#include "../id.h"
#include "../instance_cfg.h"

#include "../../pot/id.h"

/* *****************************************************************************
 * Events
 */

/* Signals that can be generated as part of an event. */
enum Sequencer_SM_Evt_Sig{
    k_Seq_SM_Evt_Sig_Beg,                           // Inclusive
    k_Seq_SM_Evt_Sig_Min = k_Seq_SM_Evt_Sig_Beg,    // Inclusive
    k_Seq_SM_Evt_Sig_1st = k_Seq_SM_Evt_Sig_Beg,    // Inclusive

	k_Seq_SM_Evt_Sig_Init_Instance = k_Seq_SM_Evt_Sig_Beg,
    #if CONFIG_FKMG_SEQ_ALLOW_SHUTDOWN
	k_Seq_SM_Evt_Sig_Deinit_Instance,
    #endif
    k_Seq_SM_Evt_Timer_Elapsed,
    k_Seq_SM_Evt_Sig_Pot_Value_Changed,
    k_Seq_SM_Evt_Sig_UART_RX_Received,
    k_Seq_SM_Evt_Sig_Button_Pressed,
    k_Seq_SM_Evt_Sig_Mode_Select_State,

    k_Seq_SM_Evt_Sig_End,                           // Exclusive
    k_Seq_SM_Evt_Sig_Max = k_Seq_SM_Evt_Sig_End - 1,// Inclusive
    k_Seq_SM_Evt_Sig_Lst = k_Seq_SM_Evt_Sig_End - 1,// Inclusive
    k_Seq_SM_Evt_Sig_Cnt = k_Seq_SM_Evt_Sig_End
                         - k_Seq_SM_Evt_Sig_Beg,	// Inclusive
	k_Seq_SM_Evt_Sig_Ivd = k_Seq_SM_Evt_Sig_End
};

/* Data signal k_Seq_SM_Evt_Sig_Init_Instance can generate. */
struct Sequencer_SM_Evt_Sig_Init_Instance{
    struct Sequencer_Instance_Cfg cfg;
};


/* Data signal k_Seq_SM_Evt_Timer_Elapsed can generate. */
struct Sequencer_SM_Evt_Sig_Timer_Elapsed{
    enum Sequencer_Id id;
    bool edge; 
};

/* Data signal k_Seq_SM_Evt_Sig_Pot_Value_Changed can generate. */
struct Sequencer_SM_Evt_Sig_Pot_Value_Changed{
    enum Pot_Id pot_id; 
    uint32_t val; 
};


/* Data signal k_Seq_SM_Evt_Sig_UART_RX_Received can generate. */
struct Sequencer_SM_Evt_Sig_UART_RX_RECEIVED{
    enum Sequencer_Id id;
    uint8_t bytes[3]; 
};


/* Data signal k_Seq_SM_Evt_Sig_Button_Pressed can generate. */
struct Sequencer_SM_Evt_Sig_Button_Pressed{
    uint8_t btn_id;
    bool port;
};


/* Events (i.e. signal + signal's data if any) Seq State Machine generates. */
struct Sequencer_SM_Evt{
	enum Sequencer_SM_Evt_Sig sig;
	union Sequencer_SM_Evt_Data{
        struct Sequencer_SM_Evt_Sig_Init_Instance       init_inst;
        struct Sequencer_SM_Evt_Sig_Timer_Elapsed       stepped;
        struct Sequencer_SM_Evt_Sig_Pot_Value_Changed   pot_changed;
        struct Sequencer_SM_Evt_Sig_UART_RX_RECEIVED    midi_cmd; 
        struct Sequencer_SM_Evt_Sig_Button_Pressed      pressed;
	}data;
};

#ifdef __cplusplus
}
#endif

#endif /* FKMG_SEQ_SM_EVT_H */
